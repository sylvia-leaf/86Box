# Whenever a commit is pushed to master (ideally via a pull-request!)
# this action will create the next release, which means:
# 1. tag master with the proper version
# 2. create a new draft release (pre-released if a nightly build)
# 3. add release notes

name: üè≠ Create Release

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      is_prelease:
        description: 'Should be a pre-release?'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      tag_value:
        description: 'Create a new release from latest master with the given tag, if this is left blank it will bump the patch version. You dont need to include the "v" prefix'
        required: false

permissions:
  contents: write

jobs:
  cut-release:
    if: github.repository == 'PCBox/PCBox'
    name: "Create Tag and Release"
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4

      # Docs - https://github.com/mathieudutour/github-tag-action
      - name: Bump Version and Push Tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ github.token }}
          tag_prefix: v
          default_bump: patch
          # if set, it will overwrite the bump settings
          custom_tag: ${{ github.event.inputs.tag_value == '' && null || github.event.inputs.tag_value }}

      # TODO - we could do this and remove the node.js script, but auto-generated notes only work
      # with PRs -- not commits (determine how much we care).
      # - name: Create Draft Release
      #   run: |
      #     echo "Creating release with tag - ${{ steps.tag_version.outputs.new_tag }}"
      #     gh release create ${{ steps.tag_version.outputs.new_tag }} --draft --generate-notes -title ${{ steps.tag_version.outputs.new_tag }}

      - name: Create a GitHub Release (Manual)
        uses: softprops/action-gh-release@v2
        if: steps.tag_version.outputs.new_tag && github.event_name == 'workflow_dispatch'
        with:
          draft: true
          prerelease: ${{ github.event_name != 'workflow_dispatch' || inputs.is_prelease == 'true' }}
          tag_name: ${{ steps.tag_version.outputs.new_tag }}

      - name: Create a GitHub Release (Push)
        uses: softprops/action-gh-release@v2
        if: steps.tag_version.outputs.new_tag && github.event_name != 'workflow_dispatch'
        with:
          draft: true
          prerelease: true
          tag_name: ${{ steps.tag_version.outputs.new_tag }}

  # Upload the Artifacts
  upload_artifacts:
    if: github.repository == 'PCBox/PCBox'
    needs:
      - cut-release
    name: "Upload Artifacts"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepare Artifact Folder
        run: mkdir ./ci-artifacts/

      - uses: actions/download-artifact@v4
        name: Download all Artifacts
        with:
          path: ./ci-artifacts/

      - name: Display structure of downloaded files
        run: ls ./ci-artifacts/ 

      - name: Name and Upload the Release Assets
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SCAN_DIR: ${{ github.WORKSPACE }}/ci-artifacts
        run: |
          TAG_VAL=${{needs.cut-release.outputs.new_tag}}
          echo "TAG_VAL=${TAG_VAL}"
          gh release list --repo PCBox/PCBox
          gh release upload "${TAG_VAL}" ${{ github.WORKSPACE }}/ci-artifacts/PCBox*/PCBox.exe  --repo PCBox/PCBox --clobber

      - name: Publish Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          TAG_VAL=${{needs.cut-release.outputs.new_tag}}
          echo "TAG_VAL=${TAG_VAL}"
          gh release edit ${TAG_VAL} --draft=false --repo PCBox/PCBox

      - uses: actions/setup-node@v4
        with:
          node-version: 16